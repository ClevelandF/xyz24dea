names(file_list[["data/DE_prelimHES23_HYEFU23_TY25_SQ.csv"]])
file_list[["data/DE_prelimHES23_HYEFU23_TY25_SQ.csv"]]
names(file_list[["prelimHES23, HYEFU23"]])
names(file_list[["prelimHES23, HYEFU23"]])["data/DE_prelimHES23_HYEFU23_TY25_SQ.csv"]
file_lookup <- list()
datapath <- "abcdef"
name <- "123"
file_lookup <- c(file_lookup, datapath = name)
file_lookup
file_lookup <- c(file_lookup, get(datapath) = name)
file_lookup <- c(file_lookup, "datapath" = name)
file_lookup
file_lookup <- c(file_lookup, name)
file_lookup
names(file_lookup[[3]]) <- datapath
file_lookup
file_lookup[["abcdef"]]
file_lookup[[3]]["abcdef"]
file_lookup <- c(file_lookup, `datapath` = name)
file_lookup
fl <- c(file_lookup, name)
names(fl) <- datapath
fl
clear
flt <- list
flt <- c(flt, name)
names(flt) <- datapath
flt
flt <- list()
flt <- c(flt, name)
names(flt)[[1]] <- datapath
flt
name2 <- "ghijk"
datapath <- "12345"
flt <- c(flt, name)
names(flt[[2]]) <- datapath
flt
flt <- list()
flt <- c(flt, name)
names(flt)[[1]] <- datapath
flt <- c(flt, name2)
datapath2 <- "qwerty"
names(flt)[[2]] <- datapath2
flt
flt[["qwerty"]]
runApp('app')
shiny::runApp('app')
runApp('app')
runApp('app')
dtt <- fread("app/data/DE_fictionalHES21_HYEFU23_TY25_SQ.csv")
colnames(dtt)
runApp('app')
runApp('app')
shinylive::export(appdir = "app", destdir = "docs")
httpuv::runStaticServer("docs/", port=8008)
shiny::runApp('app')
httpuv::runStaticServer("docs/", port=8008)
library(data.table)
dt <- data.table(x = c("a", "b", "a"), y = c(1, 1, 1))
dt[x == "a", sum(y)]
library(data.table)
dt <- data.table(x = c("a", "b", "a"), y = c(1, 1, 1))
dt[x == "b", sum(y)]
library(data.table)
dt <- data.table(x = c("a", "b", "a"), y = c(1, 1, 1))
dt[x == "b", .(sum(y))]
library(data.table)
dt <- data.table(x = c("a", "b", "a"), y = c(1, 1, 1))
dt[x == "a", .(sum(y))]
shiny::runApp('app')
runApp('app')
runApp('app')
shiny::runApp('app')
??st_simplify
fread <- ("~/Downloads/wid_all_data/WID_data_GB.csv")
table <- fread("~/Downloads/wid_all_data/WID_data_GB.csv")
View(table)
table <- fread("~/Downloads/wid_all_data/WID_data_GB.csv")
table[year == "2014", value == "431302000"]
table[year == "2014" & value == "431302000"]
table <- fread("~/Downloads/wid_all_data/WID_data_GB.csv")
table[year == "2014" & value %like% "431302000"]
table <- fread("~/Downloads/wid_all_data/WID_data_GB.csv")
table[year == "1994" & value == "431302000"]
table <- fread("~/Downloads/wid_all_data/WID_data_GB.csv")
table[year == "1994" & value == "47043000"]
table <- fread("~/Downloads/wid_all_data/WID_data_GB.csv")
table[year == "1994" & value == "431302000"]
table <- fread("~/Downloads/wid_all_data/WID_data_GB.csv")
table[year == "1994" & value %like% "431302000"]
table <- fread("~/Downloads/wid_all_data/WID_data_GB.csv")
table[year == "1994" & value %like% "431302"]
table <- fread("~/Downloads/wid_all_data/WID_data_GB.csv")
table[year == "1994" & value %like% "43130"]
table[variable == "aptincj992" & year %between% c(1994, 2013)]
table[year == "1994" & value %like% "43130"]
table[variable == "aptincj992" & percentile == "p55p100" & year %between% c(1994, 2013)]
table[year == 1994 & value %like% "43130"]
table[year == 1994 & value %like% "4313"]
table[year == 1994 & value == 47043000]
table[value == 431302000]
table <- fread("~/Downloads/wid_all_data/WID_data_GB.csv")
table[value %like% 431302000]
table[value %like% "43130200"]
table[value %like% "4313020"]
table[value %like% "431302"]
table[value %like% "43130"]
table[value %like% "%43130%"]
table <- fread("~/Downloads/wid_all_data/WID_data_GB.csv")
table[value %like% "43130"]
table <- fread("~/Downloads/wid_all_data/WID_data_GB.csv")
table[value == 47043000]
table[value %like% "43130"]
table[value == 47043000]
table[value == 431302000]
table[value == 52491000]
table[value == 1018712000]
table[value == 52491000]
table[value == 1018712000]
table[value %like% "431302"]
shiny::runApp('app')
#Takes IDI output and saves in .csv format to be used with DE
#Load libraries
library(data.table)
library(openxlsx)
library(shinylive)
library(httpuv)
#update to match new data
#format: YY for the HES year of input data
hes_version <- "23"
#format: "<EFU>YY" e.g. HYEFU23 for the EFU version of input data
efu_version <- "BEFU24"
#format: YYYY-MM-DD for the generation date of input data
summary_date <- "2024-06-14"
#format: c("YY", "YY" ... ) for each year of input data to be converted
tax_years <- c("25", "26", "27", "28")
#format: "SQ" or reform code
result_type <- "SQ"
#open file, load descriptors and values and merge into single data.table
filename <- paste0("update/DE_results_HES", hes_version, "_", efu_version, "_", result_type, "_", summary_date, "_no_raw_info.xlsx")
wb <- openxlsx::loadWorkbook(filename)
descriptors <- data.table(openxlsx::read.xlsx(wb, sheet = "Descriptors"))
values <- data.table(openxlsx::read.xlsx(wb, sheet = "Values"))
output <- merge(descriptors, values, by = "Index")
for (tax_year in tax_years) {
year_output <- output[Tax_Year == tax_year, .(Index, Income_Group, Income_Type, Population_Type, Description, Income_Measure, Value_Type, Value, Population)]
year_output[Income_Group == "$20k-$40", Income_Group := "$20k-$40k"]
fwrite(output, paste0("app/data/DE_HES", hes_version, "_", efu_version, "_TY", tax_year, "_", result_type, ".csv"))
}
shiny::runApp('app')
tax_year <- 25
tax_year <- "25"
year_output <- output[Tax_Year == tax_year, .(Index, Income_Group, Income_Type, Population_Type, Description, Income_Measure, Value_Type, Value, Population)]
year_output[Income_Group == "$20k-$40", Income_Group := "$20k-$40k"]
#Takes IDI output and saves in .csv format to be used with DE
#Load libraries
library(data.table)
library(openxlsx)
library(shinylive)
library(httpuv)
#update to match new data
#format: YY for the HES year of input data
hes_version <- "23"
#format: "<EFU>YY" e.g. HYEFU23 for the EFU version of input data
efu_version <- "BEFU24"
#format: YYYY-MM-DD for the generation date of input data
summary_date <- "2024-06-14"
#format: c("YY", "YY" ... ) for each year of input data to be converted
tax_years <- c("25", "26", "27", "28")
#format: "SQ" or reform code
result_type <- "SQ"
#open file, load descriptors and values and merge into single data.table
filename <- paste0("update/DE_results_HES", hes_version, "_", efu_version, "_", result_type, "_", summary_date, "_no_raw_info.xlsx")
wb <- openxlsx::loadWorkbook(filename)
descriptors <- data.table(openxlsx::read.xlsx(wb, sheet = "Descriptors"))
values <- data.table(openxlsx::read.xlsx(wb, sheet = "Values"))
output <- merge(descriptors, values, by = "Index")
for (tax_year in tax_years) {
year_output <- output[Tax_Year == tax_year, .(Index, Income_Group, Income_Type, Population_Type, Description, Income_Measure, Value_Type, Value, Population)]
year_output[Income_Group == "$20k-$40", Income_Group := "$20k-$40k"]
fwrite(year_output, paste0("app/data/DE_HES", hes_version, "_", efu_version, "_TY", tax_year, "_", result_type, ".csv"))
}
runApp('app')
runApp('app')
runApp('app')
data
library(data.table)
data <- fread("data/DE_HES23_BEFU24_TY25_SQ.csv")
library(data.table)
data <- fread("data/DE_HES23_BEFU24_TY25_SQ.csv")
library(data.table)
data <- fread("app/data/DE_HES23_BEFU24_TY25_SQ.csv")
library(data.table)
data <- fread("app/data/DE_HES23_BEFU24_TY25_SQ.csv")
data[Description == "Aged 0-15" & Population_Type == "Individual" & Value_Type == "Disposable Income"]
runApp('app')
runApp('app')
runApp('app')
shiny::runApp('app')
shinylive::export(appdir = "app", destdir = "docs")
httpuv::runStaticServer("docs/", port=8008)
shiny::runApp('app')
runApp('app')
runApp('app')
runApp('app')
shinylive::export(appdir = "app", destdir = "docs")
httpuv::runStaticServer("docs/", port=8008)
#Takes IDI output and saves in .csv format to be used with DE
#Load libraries
library(data.table)
library(openxlsx)
library(shinylive)
library(httpuv)
#update to match new data
#format: YY for the HES year of input data
hes_version <- "23"
#format: "<EFU>YY" e.g. HYEFU23 for the EFU version of input data
efu_version <- "BEFU24"
#format: YYYY-MM-DD for the generation date of input data
summary_date <- "2024-06-14"
#format: c("YY", "YY" ... ) for each year of input data to be converted
tax_years <- c("25", "26", "27", "28")
#format: "SQ" or reform code
result_type <- "SQ"
#open file, load descriptors and values and merge into single data.table
filename <- paste0("update/DE_results_HES", hes_version, "_", efu_version, "_", result_type, "_", summary_date, "_no_raw_info.xlsx")
wb <- openxlsx::loadWorkbook(filename)
#Takes IDI output and saves in .csv format to be used with DE
#Load libraries
library(data.table)
library(openxlsx)
library(shinylive)
library(httpuv)
#update to match new data
#format: YY for the HES year of input data
hes_version <- "23"
#format: "<EFU>YY" e.g. HYEFU23 for the EFU version of input data
efu_version <- "BEFU24"
#format: YYYY-MM-DD for the generation date of input data
summary_date <- "2024-06-14"
#format: c("YY", "YY" ... ) for each year of input data to be converted
tax_years <- c("25", "26", "27", "28")
#format: "SQ" or reform code
result_type <- "SQ"
#open file, load descriptors and values and merge into single data.table
filename <- paste0("update/DE_results_HES", hes_version, "_", efu_version, "_", result_type, "_", summary_date, "_no_raw_info.xlsx")
wb <- openxlsx::loadWorkbook(filename)
descriptors <- data.table(openxlsx::read.xlsx(wb, sheet = "Descriptors"))
values <- data.table(openxlsx::read.xlsx(wb, sheet = "Values"))
output <- merge(descriptors, values, by = "Index")
for (tax_year in tax_years) {
year_output <- output[Tax_Year == tax_year, .(Income_Group, Income_Type, Population_Type, Description, Income_Measure, Value_Type, Value, Population)]
year_output[Income_Group == "$20k-$40"]
#fwrite(year_output, paste0("app/data/DE_HES", hes_version, "_", efu_version, "_TY", tax_year, "_", result_type, ".csv"))
}
year_output[Income_Group == "$20k-$40"]
#Takes IDI output and saves in .csv format to be used with DE
#Load libraries
library(data.table)
library(openxlsx)
library(shinylive)
library(httpuv)
#update to match new data
#format: YY for the HES year of input data
hes_version <- "23"
#format: "<EFU>YY" e.g. HYEFU23 for the EFU version of input data
efu_version <- "BEFU24"
#format: YYYY-MM-DD for the generation date of input data
summary_date <- "2024-06-14"
#format: c("YY", "YY" ... ) for each year of input data to be converted
tax_years <- c("25", "26", "27", "28")
#format: "SQ" or reform code
result_type <- "SQ"
#open file, load descriptors and values and merge into single data.table
filename <- paste0("update/DE_results_HES", hes_version, "_", efu_version, "_", result_type, "_", summary_date, "_no_raw_info.xlsx")
wb <- openxlsx::loadWorkbook(filename)
descriptors <- data.table(openxlsx::read.xlsx(wb, sheet = "Descriptors"))
values <- data.table(openxlsx::read.xlsx(wb, sheet = "Values"))
output <- merge(descriptors, values, by = "Index")
for (tax_year in tax_years) {
year_output <- output[Tax_Year == tax_year, .(Income_Group, Income_Type, Population_Type, Description, Income_Measure, Value_Type, Value, Population)]
year_output[Income_Group == "$20k-$40", Income_Group := "$20k-$40k"]
fwrite(year_output, paste0("app/data/DE_HES", hes_version, "_", efu_version, "_TY", tax_year, "_", result_type, ".csv"))
}
shiny::runApp('app')
??fwrite
#Takes IDI output and saves in .csv format to be used with DE
#Load libraries
library(data.table)
library(openxlsx)
library(shinylive)
library(httpuv)
#update to match user data
#NOTE: Please ensure that user data is NOT contained within the Distribution Explorer
#directory when pushing updates to GitHub.
#format: YY for the HES year of input data
hes_version <- "21"
#format: "<EFU>YY" e.g. HYEFU23 for the EFU version of input data
efu_version <- "HYEFU23"
#format: YYYY-MM-DD for the generation date of input data
summary_date <- "2024-04-03"
#format: c("YY", "YY" ... ) for each year of input data to be converted
tax_years <- c("25", "26", "27", "28")
#format: add the reform code or other custom name for your user results
result_type <- "SNP8"
#enter the file location and name of your user upload
user_filename <- "~/Projects/DE Upgrade Project/archive_data/DE_results_HES23_BEFU24_SQ_2024-06-14_no_raw_info.xlsx"
wb <- openxlsx::loadWorkbook(user_filename)
descriptors <- data.table(openxlsx::read.xlsx(wb, sheet = "Descriptors"))
values <- data.table(openxlsx::read.xlsx(wb, sheet = "Values"))
output <- merge(descriptors, values, by = "Index")
for (tax_year in tax_years) {
year_output <- output[Tax_Year == tax_year, .(Income_Group, Income_Type, Population_Type, Description, Income_Measure, Value_Type, Value, Population)]
if (file.exists("user_upload_data")) {
fwrite(year_output, paste0("user_upload_data/DE_HES", hes_version, "_", efu_version, "_TY", tax_year, "_", result_type, ".csv"))
}
else {
dir.create("user_upload_data")
fwrite(year_output, paste0("user_upload_data/DE_HES", hes_version, "_", efu_version, "_TY", tax_year, "_", result_type, ".csv"))
}
}
#Takes IDI output and saves in .csv format to be used with DE
#Load libraries
library(data.table)
library(openxlsx)
library(shinylive)
library(httpuv)
#update to match user data
#NOTE: Please ensure that user data is NOT contained within the Distribution Explorer
#directory when pushing updates to GitHub.
#format: YY for the HES year of input data
hes_version <- "21"
#format: "<EFU>YY" e.g. HYEFU23 for the EFU version of input data
efu_version <- "HYEFU23"
#format: YYYY-MM-DD for the generation date of input data
summary_date <- "2024-04-03"
#format: c("YY", "YY" ... ) for each year of input data to be converted
tax_years <- c("25", "26", "27", "28")
#format: add the reform code or other custom name for your user results
result_type <- "SQ"
#enter the file location and name of your user upload
user_filename <- "~/Projects/DE Upgrade Project/archive_data/DE_results_HES23_BEFU24_SQ_2024-06-14_no_raw_info.xlsx"
wb <- openxlsx::loadWorkbook(user_filename)
descriptors <- data.table(openxlsx::read.xlsx(wb, sheet = "Descriptors"))
values <- data.table(openxlsx::read.xlsx(wb, sheet = "Values"))
output <- merge(descriptors, values, by = "Index")
for (tax_year in tax_years) {
year_output <- output[Tax_Year == tax_year, .(Income_Group, Income_Type, Population_Type, Description, Income_Measure, Value_Type, Value, Population)]
if (file.exists("user_upload_data")) {
fwrite(year_output, paste0("user_upload_data/DE_HES", hes_version, "_", efu_version, "_TY", tax_year, "_", result_type, ".csv"))
}
else {
dir.create("user_upload_data")
fwrite(year_output, paste0("user_upload_data/DE_HES", hes_version, "_", efu_version, "_TY", tax_year, "_", result_type, ".csv"))
}
}
shiny::runApp('app')
table <- fread("app/data/DE_HES23_BEFU24_TY28_SQ.csv")
table[, .(unique(Description))]
runApp('app')
shiny::runApp('app')
runApp('app')
shiny::runApp('app')
runApp('app')
runApp('app')
shinylive::export(appdir = "app", destdir = "docs")
httpuv::runStaticServer("docs/", port=8008)
shiny::runApp('app')
??shinyvalidate
??InputValidator
shiny::runApp('app')
shiny::runApp('app')
#Takes IDI output and saves in .csv format to be used with DE
#Load libraries
library(data.table)
library(openxlsx)
library(shinylive)
library(httpuv)
#update to match user data
#NOTE: Please ensure that user data is NOT contained within the Distribution Explorer
#directory when pushing updates to GitHub.
#format: YY for the HES year of input data
hes_version <- "21"
#format: "<EFU>YY" e.g. HYEFU23 for the EFU version of input data
efu_version <- "HYEFU23"
#format: YYYY-MM-DD for the generation date of input data
summary_date <- "2024-04-03"
#format: c("YY", "YY" ... ) for each year of input data to be converted
tax_years <- c("25", "26", "27", "28")
#format: add the reform code or other custom name for your user results
result_type <- "SQ"
#enter the file location and name of your user upload
user_filename <- "~/Projects/DE Upgrade Project/archive_data/DE_results_HES23_BEFU24_SQ_2024-06-14_no_raw_info.xlsx"
wb <- openxlsx::loadWorkbook(user_filename)
descriptors <- data.table(openxlsx::read.xlsx(wb, sheet = "Descriptors"))
values <- data.table(openxlsx::read.xlsx(wb, sheet = "Values"))
output <- merge(descriptors, values, by = "Index")
save_dir <- "user_upload_data"
for (tax_year in tax_years) {
year_output <- output[Tax_Year == tax_year, .(Income_Group, Income_Type, Population_Type, Description, Income_Measure, Value_Type, Value, Population)]
if (!dir.exists(save_dir)) {
dir.create(save_dir)
}
fwrite(year_output, paste0(save_dir, "/DE_HES", hes_version, "_", efu_version, "_TY", tax_year, "_", result_type, ".csv"))
}
shinylive::export(appdir = "app", destdir = "docs")
httpuv::runStaticServer("docs/", port=8008)
shinylive::export(appdir = "app", destdir = "docs")
shinylive::export(appdir = "app", destdir = "docs")
httpuv::runStaticServer("docs/", port=8008)
shinylive::export(appdir = "app", destdir = "docs")
httpuv::runStaticServer("docs/", port=8008)
shinylive::export(appdir = "app", destdir = "docs")
httpuv::runStaticServer("docs/", port=8008)
shinylive::export(appdir = "app", destdir = "docs")
httpuv::runStaticServer("docs/", port=8008)
shinylive::export(appdir = "app", destdir = "docs")
shinylive::export(appdir = "app", destdir = "docs")
httpuv::runStaticServer("docs/", port=8008)
shiny::runApp('app')
shiny::runApp('app')
runApp('app')
httpuv::runStaticServer("docs/", port=8008)
shinylive::export(appdir = "app", destdir = "docs")
httpuv::runStaticServer("docs/", port=8008)
runApp('app')
shinylive::export(appdir = "app", destdir = "docs")
runApp('app')
httpuv::runStaticServer("docs/", port=8008)
runApp('app')
shiny::runApp('app')
httpuv::runStaticServer("docs/", port=8008)
shinylive::export(appdir = "app", destdir = "docs")
httpuv::runStaticServer("docs/", port=8008)
shinylive::export(appdir = "app", destdir = "docs")
httpuv::runStaticServer("docs/", port=8008)
install.packages(shiny)
install.packages("shiny")
install.packages("shiny")
install.packages("shinylive")
library(shinylive)
library(shiny)
library(shiny)
library(data.table)
library(DT)
library(ggplot2)
library(plotly)
library(dplyr)
library(stringr)
library(scales)
library(shinyWidgets)
library(bslib)
library(bsicons)
source('functions.R')
runApp('app')
shinylive::export(appdir = "app", destdir = "docs")
install.packages("data.table")
install.packages("data.table")
install.packages("DT")
install.packages("DT")
install.packages("ggplot2")
install.packages("plotly")
install.packages("dplyr")
install.packages("stringr")
install.packages("scales")
install.packages("shinyWidgets")
install.packages("bslib")
install.packages("bsicons")
shiny::runApp('app')
shinylive::export(appdir = "app", destdir = "docs")
httpuv::runStaticServer("docs/", port=8008)
runApp('app')
runApp('app')
shinylive::export(appdir = "app", destdir = "docs")
httpuv::runStaticServer("docs/", port=8008)
runApp('app')
shinylive::export(appdir = "app", destdir = "docs")
httpuv::runStaticServer("docs/", port=8008)
runApp('app')
httpuv::runStaticServer("docs/", port=8008)
shinylive::export(appdir = "app", destdir = "docs")
httpuv::runStaticServer("docs/", port=8008)
httpuv::runStaticServer("docs/", port=8008)
runApp()
setwd("/app")
setwd()
getwd()
setwd("C:/Users/ClevelandF/Projects/DE Upgrade Project/AIGithub/24dea/app")
runApp()
runApp()
shinylive::export(appdir = "app", destdir = "docs")
getwd()
shinylive::export(appdir = "app", destdir = "docs")
shiny::runApp('app')
shinylive::export(appdir = "app", destdir = "docs")
httpuc::runStaticServer("docs")
httpuv::runStaticServer("docs")
httpuv::runStaticServer("docs/", port=8008)
shiny::runApp('app')
shinylive::export("app", "docs", wasm_packages = FALSE, package_cache = FALSE)
httpuv::runStaticServer("docs")
shinylive::export("app", "docs", wasm_packages = FALSE, package_cache = FALSE)
httpuv::runStaticServer("docs")
shiny::runApp('app')
runApp('app')
shinylive::export("app", "docs", wasm_packages = FALSE, package_cache = FALSE, template_params = list(title = "DistributionExplorer - The Treasury New Zealand", include_in_head = tags$link(rel = "shortcut icon", href = "favicon.ico")))
httpuv::runStaticServer("docs")
shinylive::export("app", "docs", wasm_packages = FALSE, package_cache = FALSE, template_params = list(title = "DistributionExplorer - The Treasury New Zealand", include_in_head = tags$link(rel = "shortcut icon", href = "favicon.ico")))
httpuv::runStaticServer("docs")
httpuv::runStaticServer("docs")
httpuv::runStaticServer("docs")
shiny::runApp('app')
